using AutomaticBonusProgression.Util;
using BlueprintCore.Blueprints.CustomConfigurators.Classes;
using BlueprintCore.Blueprints.References;
using Kingmaker.Blueprints;
using Kingmaker.UnitLogic.FactLogic;

namespace AutomaticBonusProgression.Enchantments
{
  internal class Invulnerability
  {
    private static readonly Logging.Logger Logger = Logging.GetLogger(nameof(Invulnerability));

    private const string EffectName = "LA.Invulnerability.Effect";
    private const string BuffName = "LA.Invulnerability.Buff";

    private const string DisplayName = "LA.Invulnerability.Name";
    private const string Description = "LA.Invulnerability.Description";
    private const int EnhancementCost = 3;

    internal static void Configure()
    {
      Logger.Log($"Configuring Invulnerability");

      var icon = BuffRefs.DivineGuardianBodyguardBuff.Reference.Get().Icon;
      var enchantInfo = new ArmorEnchantInfo(DisplayName, Description, icon, EnhancementCost);
      EnchantTool.AddEnhancementEquivalenceArmor(ArmorEnchantmentRefs.ArcaneArmorInvulnerabilityEnchant, enchantInfo);

      var invulnerabilityFeature = FeatureRefs.ArcaneArmorInvulnerabilityFeature.Reference.Get();

      // Adjusted cause it's kinda weak for +3
      FeatureConfigurator.For(invulnerabilityFeature).EditComponent<AddDamageResistancePhysical>(c => c.Value = 10);

      EnchantTool.CreateEnchant(
        enchantInfo,
        effectBuff: new(
          EffectName,
          Guids.InvulnerabilityEffect,
          invulnerabilityFeature.GetComponent<AddDamageResistancePhysical>()),
        parentBuff: new(BuffName, Guids.InvulnerabilityBuff));
    }
  }
}
